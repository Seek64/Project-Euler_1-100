from math import sqrt
from math import gcd

# The goal is to find all Pythagorean triples with a unique sum < N
# https://en.wikipedia.org/wiki/Pythagorean_triple

# A primitive Pythagorean triple (a, b, c) is generated by
# a = u*u - v*v
# b = 2*u*v
# c = u*u + v*v
# Where u and v are coprime, not both odd and u > v
#
# The length is given by L = a+b+c = 2*u*(u+v) < N
#
# The maximum value for u can be approximated by
# 2*u*(u+v) < 2*u*(u+u) = 4*u*u <= L 
# <=> u <= sqrt(L)/2

# Maximum Length
N = 1500000

# Since L is always even, we get at most N//2 results
Result = [0] * (N//2)

for u in range(2, int(sqrt(N//2))+1):
    
    v = 1+(u%2)

    while (u > v):

        # Check if u and v are coprime
        if gcd(u, v) == 1:
            l = 2*u*(u+v)
            l_base = l
            # Account for multiples
            while (l < N):
                Result[l//2] += 1
                l += l_base

        v += 2

# Check for unique results
res = len([i for i in Result if i == 1])

print(res)
